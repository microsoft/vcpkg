vcpkg_from_github(
    OUT_SOURCE_PATH SOURCE_PATH
    REPO wolfssl/wolfssl
    REF "v${VERSION}-stable"
    SHA512 b3953692a87aada84d77a26aac3ee1791344af3cf6e3d0b4fa9913095bc0892dd4cfe1491a893b469469bdfba511fe067ee80d3c0beab8df5ac5e174fa5f5577
    HEAD_REF master
    PATCHES
    )

# Check for custom CMake variables first, then fall back to feature-based defaults
if(DEFINED CUSTOM_ASIO_SETTING)
    set(ENABLE_ASIO ${CUSTOM_ASIO_SETTING})
elseif ("asio" IN_LIST FEATURES)
    set(ENABLE_ASIO yes)
else()
    set(ENABLE_ASIO no)
endif()

if(DEFINED CUSTOM_DTLS_SETTING)
    set(ENABLE_DTLS ${CUSTOM_DTLS_SETTING})
elseif ("dtls" IN_LIST FEATURES)
    set(ENABLE_DTLS yes)
else()
    set(ENABLE_DTLS no)
endif()

if(DEFINED CUSTOM_QUIC_SETTING)
    set(ENABLE_QUIC ${CUSTOM_QUIC_SETTING})
elseif ("quic" IN_LIST FEATURES)
    set(ENABLE_QUIC yes)
else()
    set(ENABLE_QUIC no)
endif()

# Configurable CMake options with defaults
if(DEFINED CUSTOM_WOLFSSL_BUILD_OUT_OF_TREE)
    set(WOLFSSL_BUILD_OUT_OF_TREE_VALUE ${CUSTOM_WOLFSSL_BUILD_OUT_OF_TREE})
else()
    set(WOLFSSL_BUILD_OUT_OF_TREE_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_EXAMPLES)
    set(WOLFSSL_EXAMPLES_VALUE ${CUSTOM_WOLFSSL_EXAMPLES})
else()
    set(WOLFSSL_EXAMPLES_VALUE no)
endif()

if(DEFINED CUSTOM_WOLFSSL_CRYPT_TESTS)
    set(WOLFSSL_CRYPT_TESTS_VALUE ${CUSTOM_WOLFSSL_CRYPT_TESTS})
else()
    set(WOLFSSL_CRYPT_TESTS_VALUE no)
endif()

if(DEFINED CUSTOM_WOLFSSL_OPENSSLEXTRA)
    set(WOLFSSL_OPENSSLEXTRA_VALUE ${CUSTOM_WOLFSSL_OPENSSLEXTRA})
else()
    set(WOLFSSL_OPENSSLEXTRA_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_TPM)
    set(WOLFSSL_TPM_VALUE ${CUSTOM_WOLFSSL_TPM})
else()
    set(WOLFSSL_TPM_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_TLSX)
    set(WOLFSSL_TLSX_VALUE ${CUSTOM_WOLFSSL_TLSX})
else()
    set(WOLFSSL_TLSX_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_OCSP)
    set(WOLFSSL_OCSP_VALUE ${CUSTOM_WOLFSSL_OCSP})
else()
    set(WOLFSSL_OCSP_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_OCSPSTAPLING)
    set(WOLFSSL_OCSPSTAPLING_VALUE ${CUSTOM_WOLFSSL_OCSPSTAPLING})
else()
    set(WOLFSSL_OCSPSTAPLING_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_OCSPSTAPLING_V2)
    set(WOLFSSL_OCSPSTAPLING_V2_VALUE ${CUSTOM_WOLFSSL_OCSPSTAPLING_V2})
else()
    set(WOLFSSL_OCSPSTAPLING_V2_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_CRL)
    set(WOLFSSL_CRL_VALUE ${CUSTOM_WOLFSSL_CRL})
else()
    set(WOLFSSL_CRL_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_DES3)
    set(WOLFSSL_DES3_VALUE ${CUSTOM_WOLFSSL_DES3})
else()
    set(WOLFSSL_DES3_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_ECH)
    set(WOLFSSL_ECH_VALUE ${CUSTOM_WOLFSSL_ECH})
else()
    set(WOLFSSL_ECH_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_HPKE)
    set(WOLFSSL_HPKE_VALUE ${CUSTOM_WOLFSSL_HPKE})
else()
    set(WOLFSSL_HPKE_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_SNI)
    set(WOLFSSL_SNI_VALUE ${CUSTOM_WOLFSSL_SNI})
else()
    set(WOLFSSL_SNI_VALUE yes)
endif()

if(DEFINED CUSTOM_WOLFSSL_DTLS13)
    set(WOLFSSL_DTLS13_VALUE ${CUSTOM_WOLFSSL_DTLS13})
else()
    set(WOLFSSL_DTLS13_VALUE ${ENABLE_DTLS})
endif()

if(DEFINED CUSTOM_WOLFSSL_DTLS_CID)
    set(WOLFSSL_DTLS_CID_VALUE ${CUSTOM_WOLFSSL_DTLS_CID})
else()
    set(WOLFSSL_DTLS_CID_VALUE ${ENABLE_DTLS})
endif()

if(DEFINED CUSTOM_WOLFSSL_SESSION_TICKET)
    set(WOLFSSL_SESSION_TICKET_VALUE ${CUSTOM_WOLFSSL_SESSION_TICKET})
else()
    set(WOLFSSL_SESSION_TICKET_VALUE ${ENABLE_QUIC})
endif()

vcpkg_cmake_get_vars(cmake_vars_file)
include("${cmake_vars_file}")

foreach(config RELEASE DEBUG)
  string(APPEND VCPKG_COMBINED_C_FLAGS_${config} " -DHAVE_EX_DATA -DNO_WOLFSSL_STUB -DWOLFSSL_ALT_CERT_CHAINS -DWOLFSSL_DES_ECB -DWOLFSSL_CUSTOM_OID -DHAVE_OID_ENCODING -DWOLFSSL_CERT_GEN -DWOLFSSL_ASN_TEMPLATE -DWOLFSSL_KEY_GEN -DHAVE_PKCS7 -DHAVE_AES_KEYWRAP -DWOLFSSL_AES_DIRECT -DHAVE_X963_KDF")
  if ("secret-callback" IN_LIST FEATURES)
      string(APPEND VCPKG_COMBINED_C_FLAGS_${config} " -DHAVE_SECRET_CALLBACK")
  endif()
  if ("curve25519-blinding" IN_LIST FEATURES)
      string(APPEND VCPKG_COMBINED_C_FLAGS_${config} " -DWOLFSSL_CURVE25519_BLINDING")
  endif()
endforeach()

vcpkg_cmake_configure(
    SOURCE_PATH ${SOURCE_PATH}
    OPTIONS
      -DWOLFSSL_BUILD_OUT_OF_TREE=${WOLFSSL_BUILD_OUT_OF_TREE_VALUE}
      -DWOLFSSL_EXAMPLES=${WOLFSSL_EXAMPLES_VALUE}
      -DWOLFSSL_CRYPT_TESTS=${WOLFSSL_CRYPT_TESTS_VALUE}
      -DWOLFSSL_OPENSSLEXTRA=${WOLFSSL_OPENSSLEXTRA_VALUE}
      -DWOLFSSL_TPM=${WOLFSSL_TPM_VALUE}
      -DWOLFSSL_TLSX=${WOLFSSL_TLSX_VALUE}
      -DWOLFSSL_OCSP=${WOLFSSL_OCSP_VALUE}
      -DWOLFSSL_OCSPSTAPLING=${WOLFSSL_OCSPSTAPLING_VALUE}
      -DWOLFSSL_OCSPSTAPLING_V2=${WOLFSSL_OCSPSTAPLING_V2_VALUE}
      -DWOLFSSL_CRL=${WOLFSSL_CRL_VALUE}
      -DWOLFSSL_DES3=${WOLFSSL_DES3_VALUE}
      -DWOLFSSL_ECH=${WOLFSSL_ECH_VALUE}
      -DWOLFSSL_HPKE=${WOLFSSL_HPKE_VALUE}
      -DWOLFSSL_SNI=${WOLFSSL_SNI_VALUE}
      -DWOLFSSL_ASIO=${ENABLE_ASIO}
      -DWOLFSSL_DTLS=${ENABLE_DTLS}
      -DWOLFSSL_DTLS13=${WOLFSSL_DTLS13_VALUE}
      -DWOLFSSL_DTLS_CID=${WOLFSSL_DTLS_CID_VALUE}
      -DWOLFSSL_QUIC=${ENABLE_QUIC}
      -DWOLFSSL_SESSION_TICKET=${WOLFSSL_SESSION_TICKET_VALUE}
    OPTIONS_RELEASE
      -DCMAKE_C_FLAGS=${VCPKG_COMBINED_C_FLAGS_RELEASE}
    OPTIONS_DEBUG
      -DCMAKE_C_FLAGS=${VCPKG_COMBINED_C_FLAGS_DEBUG}
      -DWOLFSSL_DEBUG=yes)

vcpkg_cmake_install()
vcpkg_copy_pdbs()

file(INSTALL "${SOURCE_PATH}/COPYING" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}" RENAME copyright)

vcpkg_cmake_config_fixup(CONFIG_PATH lib/cmake/wolfssl)
vcpkg_fixup_pkgconfig()

file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/include")
file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/share")
