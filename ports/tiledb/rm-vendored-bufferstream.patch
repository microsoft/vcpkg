diff --git a/CMakeLists.txt b/CMakeLists.txt
index 684fa7b..e00d170 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -123,9 +123,6 @@ endif()
 set(CMAKE_C_VISIBILITY_PRESET hidden)
 set(CMAKE_CXX_VISIBILITY_PRESET hidden)
 
-# Disable warnings from Boost
-set(Boost_NO_WARN_NEW_VERSIONS ON)
-
 project(TileDB)
 message(STATUS "Starting TileDB regular build.")
 message(STATUS "  CMake version: ${CMAKE_VERSION}")
diff --git a/tiledb/sm/filesystem/s3.cc b/tiledb/sm/filesystem/s3.cc
index 5deab33..8b81e06 100644
--- a/tiledb/sm/filesystem/s3.cc
+++ b/tiledb/sm/filesystem/s3.cc
@@ -62,7 +62,6 @@
 #include <aws/s3/model/AbortMultipartUploadRequest.h>
 #include <aws/s3/model/CreateMultipartUploadRequest.h>
 #include <aws/sts/STSClient.h>
-#include <boost/interprocess/streams/bufferstream.hpp>
 #include <fstream>
 #include <iostream>
 
@@ -1797,10 +1796,8 @@ void S3::write_direct(const URI& uri, const void* buffer, uint64_t length) {
 
   Aws::S3::Model::PutObjectRequest put_object_request;
 
-  auto stream = shared_ptr<Aws::IOStream>(
-      new boost::interprocess::bufferstream((char*)buffer, length));
-
-  put_object_request.SetBody(stream);
+  put_object_request.SetBody(
+      make_shared<PreallocatedIOStream>(HERE(), buffer, length));
   put_object_request.SetContentLength(length);
 
   put_object_request.SetContentType("application/octet-stream");
@@ -1961,15 +1958,13 @@ S3::MakeUploadPartCtx S3::make_upload_part_req(
     const uint64_t length,
     const Aws::String& upload_id,
     const int upload_part_num) {
-  auto stream = shared_ptr<Aws::IOStream>(
-      new boost::interprocess::bufferstream((char*)buffer, length));
-
   Aws::S3::Model::UploadPartRequest upload_part_request;
   upload_part_request.SetBucket(aws_uri.GetAuthority());
   upload_part_request.SetKey(aws_uri.GetPath());
   upload_part_request.SetPartNumber(upload_part_num);
   upload_part_request.SetUploadId(upload_id);
-  upload_part_request.SetBody(stream);
+  upload_part_request.SetBody(
+      make_shared<PreallocatedIOStream>(HERE(), buffer, length));
   upload_part_request.SetContentLength(length);
   if (request_payer_ != Aws::S3::Model::RequestPayer::NOT_SET)
     upload_part_request.SetRequestPayer(request_payer_);
diff --git a/tiledb/sm/filesystem/s3.h b/tiledb/sm/filesystem/s3.h
index 4f20844..01ee2e4 100644
--- a/tiledb/sm/filesystem/s3.h
+++ b/tiledb/sm/filesystem/s3.h
@@ -1259,8 +1259,7 @@ class S3 : public FilesystemBase {
   };
 
   /**
-   * Used to stream results from the GetObject request into
-   * a pre-allocated buffer.
+   * Used to stream in-memoty data from/to S3.
    */
   class PreallocatedIOStream : public Aws::IOStream {
    public:
@@ -1271,9 +1270,10 @@ class S3 : public FilesystemBase {
      * @param buffer The pre-allocated underlying buffer.
      * @param size The maximum size of the underlying buffer.
      */
-    PreallocatedIOStream(void* const buffer, const size_t size)
+    PreallocatedIOStream(const void* buffer, const size_t size)
         : Aws::IOStream(new Aws::Utils::Stream::PreallocatedStreamBuf(
-              reinterpret_cast<unsigned char*>(buffer), size)) {
+              reinterpret_cast<unsigned char*>(const_cast<void*>(buffer)),
+              size)) {
     }
 
     /** Destructor. */
