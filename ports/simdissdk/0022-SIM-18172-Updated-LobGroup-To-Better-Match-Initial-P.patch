From 2d829b819b5b9be47e6820430a31f6c8ac711fe5 Mon Sep 17 00:00:00 2001
From: George Ruhlmann <george.m.ruhlmann.ctr@us.navy.mil>
Date: Thu, 17 Apr 2025 16:01:27 +0000
Subject: [PATCH 22/29] SIM-18172 Updated LobGroup To Better Match Initial
 Protobuf Definition (1/6 SDK)

**JIRA Issue:** SIM-18172

**Description:** My first pass deviated too much from the original protobuf definition resulting in unnecessary changes.

**Testing Performed:** Unit tests still pass and Simple Server looks good
---
 Examples/LOBTest/ExampleLOBTest.cpp     | 11 ++--
 SDK/simData/DataTypes.h                 | 10 +--
 SDK/simData/LobGroupMemoryDataSlice.cpp | 18 +++--
 SDK/simUtil/DataStoreTestHelper.cpp     | 22 +++----
 SDK/simVis/LobGroup.cpp                 | 14 ++--
 Testing/SimData/TestMemoryDataStore.cpp | 88 +++++++++++--------------
 6 files changed, 79 insertions(+), 84 deletions(-)

diff --git a/Examples/LOBTest/ExampleLOBTest.cpp b/Examples/LOBTest/ExampleLOBTest.cpp
index 4efe7763..c258566c 100644
--- a/Examples/LOBTest/ExampleLOBTest.cpp
+++ b/Examples/LOBTest/ExampleLOBTest.cpp
@@ -144,12 +144,11 @@ void simulateLobGroup(simData::ObjectId lobID, simData::DataStore& ds)
     simData::LobGroupUpdate* update = ds.addLobGroupUpdate(lobID, &xaction);
     update->set_time(i*3.0);
     {
-      simData::LobGroupUpdatePoint p;
-      p.set_time(i*3.0);
-      p.set_range(100000.0);
-      p.set_azimuth(-1.57 + (3.14*i/12.0));
-      p.set_elevation(-.39 + (0.78*i/12.0));
-      update->mutable_datapoints()->push_back(p);
+      simData::LobGroupUpdatePoint* p = update->add_datapoints();
+      p->set_time(i * 3.0);
+      p->set_range(100000.0);
+      p->set_azimuth(-1.57 + (3.14 * i / 12.0));
+      p->set_elevation(-.39 + (0.78 * i / 12.0));
     }
     xaction.complete(&update);
   }
diff --git a/SDK/simData/DataTypes.h b/SDK/simData/DataTypes.h
index 8fb39dfa..99a00fd2 100644
--- a/SDK/simData/DataTypes.h
+++ b/SDK/simData/DataTypes.h
@@ -403,14 +403,16 @@ namespace simData
     inline double time() const { return time_; }
     inline void set_time(double value) { time_ = value; }
 
-    /// Returns the number of points for the update
+    /// Returns the number of data points for the update
     int datapoints_size() const { return static_cast<int>(dataPoints_.size()); }
-    /// Returns true if the update has points
-    bool has_datapoints() const { return !dataPoints_.empty(); }
-    /// Constant version of the points
+    /// Constant version of the data points
     const std::vector<LobGroupUpdatePoint>& datapoints() const { return dataPoints_; }
+    /// Returns the requested data point;
+    const LobGroupUpdatePoint& datapoints(int index) const { return dataPoints_[index]; }
     /// Mutable version of the points
     std::vector<LobGroupUpdatePoint>* mutable_datapoints() { return &dataPoints_; }
+    /// Add a data point
+    LobGroupUpdatePoint* add_datapoints() { dataPoints_.push_back(LobGroupUpdatePoint()); return &dataPoints_.back(); }
 
   private:
     /// Seconds since scenario reference year for the data posit time
diff --git a/SDK/simData/LobGroupMemoryDataSlice.cpp b/SDK/simData/LobGroupMemoryDataSlice.cpp
index 298faefc..4b2ba820 100644
--- a/SDK/simData/LobGroupMemoryDataSlice.cpp
+++ b/SDK/simData/LobGroupMemoryDataSlice.cpp
@@ -83,11 +83,10 @@ void LobGroupMemoryDataSlice::update(double time)
   for (; useIter != curTimeIter; ++useIter)
   {
     // copy all points from each update record to the new current update
-    for (int pointIndex = 0; pointIndex < static_cast<int>((*useIter)->datapoints().size()); pointIndex++)
+    for (int pointIndex = 0; pointIndex < (*useIter)->datapoints_size(); pointIndex++)
     {
-      LobGroupUpdatePoint newPoint;
-      newPoint.CopyFrom((*useIter)->datapoints()[pointIndex]);
-      currentUpdate->mutable_datapoints()->push_back(newPoint);
+      LobGroupUpdatePoint* newPoint = currentUpdate->add_datapoints();
+      newPoint->CopyFrom((*useIter)->datapoints(pointIndex));
     }
   }
 
@@ -129,7 +128,8 @@ void LobGroupMemoryDataSlice::flush(double startTime, double endTime)
 void LobGroupMemoryDataSlice::insert(LobGroupUpdate *data)
 {
   // first, ensure that all data points have the time of the LobGroupUpdate they are associated with
-  for (int pointIndex = 0; pointIndex < static_cast<int>(data->datapoints().size()); pointIndex++)
+
+  for (int pointIndex = 0; pointIndex < data->datapoints_size(); pointIndex++)
   {
     (*data->mutable_datapoints())[pointIndex].set_time(data->time());
   }
@@ -138,8 +138,12 @@ void LobGroupMemoryDataSlice::insert(LobGroupUpdate *data)
   if (iter != updates_.end() && (*iter)->time() == data->time())
   {
     // add to update record with same time
-    for (int pointIndex = 0; pointIndex < static_cast<int>(data->datapoints().size()); pointIndex++)
-      (*iter)->mutable_datapoints()->push_back(data->datapoints()[pointIndex]);
+    for (int pointIndex = 0; pointIndex < data->datapoints_size(); pointIndex++)
+    {
+      LobGroupUpdatePoint* newPoint = (*iter)->add_datapoints();
+      newPoint->CopyFrom(data->datapoints(pointIndex));
+    }
+
     // done with data, since we added its points to an existing update record
     delete data;
   }
diff --git a/SDK/simUtil/DataStoreTestHelper.cpp b/SDK/simUtil/DataStoreTestHelper.cpp
index 08eaf783..03529690 100644
--- a/SDK/simUtil/DataStoreTestHelper.cpp
+++ b/SDK/simUtil/DataStoreTestHelper.cpp
@@ -269,18 +269,16 @@ void DataStoreTestHelper::addLOBUpdate(double time, uint64_t id)
   simData::LobGroupUpdate *u = dataStore_->addLobGroupUpdate(id, &t);
   SDK_ASSERT(u != nullptr);
   u->set_time(time);
-  simData::LobGroupUpdatePoint up;
-  up.set_time(time);
-  up.set_azimuth(1.0 + time);
-  up.set_elevation(10.0 + time);
-  up.set_range(1000.0);
-  u->mutable_datapoints()->push_back(up);
-  simData::LobGroupUpdatePoint up2;
-  up2.set_time(time);
-  up2.set_azimuth(20.0 + time);
-  up2.set_elevation(5.0 + time);
-  up2.set_range(1000.0);
-  u->mutable_datapoints()->push_back(up2);
+  simData::LobGroupUpdatePoint* up = u->add_datapoints();
+  up->set_time(time);
+  up->set_azimuth(1.0 + time);
+  up->set_elevation(10.0 + time);
+  up->set_range(1000.0);
+  simData::LobGroupUpdatePoint* up2 = u->add_datapoints();
+  up2->set_time(time);
+  up2->set_azimuth(20.0 + time);
+  up2->set_elevation(5.0 + time);
+  up2->set_range(1000.0);
   t.commit();
 }
 
diff --git a/SDK/simVis/LobGroup.cpp b/SDK/simVis/LobGroup.cpp
index 87479b41..40c8a257 100644
--- a/SDK/simVis/LobGroup.cpp
+++ b/SDK/simVis/LobGroup.cpp
@@ -423,15 +423,15 @@ void LobGroupNode::updateCache_(const simData::LobGroupUpdate &update, const sim
   }
 
   // prune the cache, since the data max values may adjust how much data is shown
-  const double firstTime = update.datapoints()[0].time();
-  const double lastTime = update.datapoints()[numLines-1].time();
+  const double firstTime = update.datapoints(0).time();
+  const double lastTime = update.datapoints(numLines - 1).time();
   lineCache_->pruneCache(this, firstTime, lastTime);
 
   simData::Interpolator* li = ds_.interpolator();
   for (int index = 0; index < numLines;) // Incremented in the for loop below
   {
     // handle all lines with this time (if time is not already in the cache)
-    const double time = update.datapoints()[index].time();
+    const double time = update.datapoints(index).time();
     if (lineCache_->hasTime(time))
     {
       ++index;
@@ -487,10 +487,10 @@ void LobGroupNode::updateCache_(const simData::LobGroupUpdate &update, const sim
     }
 
     // process endpoints for all lines at same time; all share same host platform position just calc'd
-    for (; index < numLines && update.datapoints()[index].time() == time; ++index)
+    for (; index < numLines && update.datapoints(index).time() == time; ++index)
     {
       // calculate end point based on update point RAE
-      const simData::LobGroupUpdatePoint &curP = update.datapoints()[index];
+      const simData::LobGroupUpdatePoint &curP = update.datapoints(index);
 
       // find the point relative to the start
       simCore::Vec3 endPoint;
@@ -528,7 +528,7 @@ void LobGroupNode::updateCache_(const simData::LobGroupUpdate &update, const sim
     // set the local grid for LOB's position and az/el of the last of the lobs
     if (index == numLines)
     {
-      const simData::LobGroupUpdatePoint &curP = update.datapoints()[numLines-1];
+      const simData::LobGroupUpdatePoint &curP = update.datapoints(numLines-1);
       simCore::Vec3 lobAngles(curP.azimuth(), curP.elevation(), 0.0);
       if (lastProps_.azelrelativetohostori())
       {
@@ -641,7 +641,7 @@ double LobGroupNode::range() const
   if (lastUpdate_.datapoints_size() == 0)
     return 0.0;
 
-  const simData::LobGroupUpdatePoint &curP = lastUpdate_.datapoints()[lastUpdate_.datapoints_size()-1];
+  const simData::LobGroupUpdatePoint &curP = lastUpdate_.datapoints(lastUpdate_.datapoints_size()-1);
   return curP.range();
 }
 
diff --git a/Testing/SimData/TestMemoryDataStore.cpp b/Testing/SimData/TestMemoryDataStore.cpp
index 8a7f41d4..4f82b02c 100644
--- a/Testing/SimData/TestMemoryDataStore.cpp
+++ b/Testing/SimData/TestMemoryDataStore.cpp
@@ -328,12 +328,11 @@ void testLobGroup_insert()
   {
     simData::LobGroupUpdate* u = ds->addLobGroupUpdate(lobId1, &t);
     u->set_time(0.0);
-    simData::LobGroupUpdatePoint up;
-    up.set_time(0.0);
-    up.set_azimuth(19.0);
-    up.set_elevation(100.0);
-    up.set_range(3450.0);
-    u->mutable_datapoints()->push_back(up);
+    simData::LobGroupUpdatePoint* up = u->add_datapoints();
+    up->set_time(0.0);
+    up->set_azimuth(19.0);
+    up->set_elevation(100.0);
+    up->set_range(3450.0);
     t.commit();
   }
 
@@ -341,12 +340,11 @@ void testLobGroup_insert()
   {
     simData::LobGroupUpdate* u = ds->addLobGroupUpdate(lobId1, &t);
     u->set_time(1.0);
-    simData::LobGroupUpdatePoint up;
-    up.set_time(1.0);
-    up.set_azimuth(11.0);
-    up.set_elevation(100.0);
-    up.set_range(3000.0);
-    u->mutable_datapoints()->push_back(up);
+    simData::LobGroupUpdatePoint* up = u->add_datapoints();
+    up->set_time(1.0);
+    up->set_azimuth(11.0);
+    up->set_elevation(100.0);
+    up->set_range(3000.0);
     t.commit();
   }
 
@@ -354,12 +352,11 @@ void testLobGroup_insert()
   {
     simData::LobGroupUpdate* u = ds->addLobGroupUpdate(lobId1, &t);
     u->set_time(1.0);
-    simData::LobGroupUpdatePoint up2;
-    up2.set_time(1.0);
-    up2.set_azimuth(12.0);
-    up2.set_elevation(100.0);
-    up2.set_range(3000.0);
-    u->mutable_datapoints()->push_back(up2);
+    simData::LobGroupUpdatePoint* up2 = u->add_datapoints();
+    up2->set_time(1.0);
+    up2->set_azimuth(12.0);
+    up2->set_elevation(100.0);
+    up2->set_range(3000.0);
     t.commit();
   }
 
@@ -368,18 +365,16 @@ void testLobGroup_insert()
   {
     simData::LobGroupUpdate* u = ds->addLobGroupUpdate(lobId1, &t);
     u->set_time(2.0);
-    simData::LobGroupUpdatePoint up;
-    up.set_time(2.0);
-    up.set_azimuth(15.0);
-    up.set_elevation(150.0);
-    up.set_range(3000.0);
-    u->mutable_datapoints()->push_back(up);
-    simData::LobGroupUpdatePoint up2;
-    up2.set_time(2.0);
-    up2.set_azimuth(16.0);
-    up2.set_elevation(150.0);
-    up2.set_range(3000.0);
-    u->mutable_datapoints()->push_back(up2);
+    simData::LobGroupUpdatePoint* up = u->add_datapoints();
+    up->set_time(2.0);
+    up->set_azimuth(15.0);
+    up->set_elevation(150.0);
+    up->set_range(3000.0);
+    simData::LobGroupUpdatePoint* up2 = u->add_datapoints();
+    up2->set_time(2.0);
+    up2->set_azimuth(16.0);
+    up2->set_elevation(150.0);
+    up2->set_range(3000.0);
     t.commit();
   }
 
@@ -387,24 +382,21 @@ void testLobGroup_insert()
   {
     simData::LobGroupUpdate* u = ds->addLobGroupUpdate(lobId1, &t);
     u->set_time(3.0);
-    simData::LobGroupUpdatePoint up;
-    up.set_time(3.0);
-    up.set_azimuth(24.0);
-    up.set_elevation(170.0);
-    up.set_range(4000.0);
-    u->mutable_datapoints()->push_back(up);
-    simData::LobGroupUpdatePoint up2;
-    up2.set_time(4.0); // this time will be reset to 3.0 on insert
-    up2.set_azimuth(35.0);
-    up2.set_elevation(180.0);
-    up2.set_range(4000.0);
-    u->mutable_datapoints()->push_back(up2);
-    simData::LobGroupUpdatePoint up3;
-    up3.set_time(3.0);
-    up3.set_azimuth(25.0);
-    up3.set_elevation(175.0);
-    up3.set_range(4000.0);
-    u->mutable_datapoints()->push_back(up3);
+    simData::LobGroupUpdatePoint* up = u->add_datapoints();
+    up->set_time(3.0);
+    up->set_azimuth(24.0);
+    up->set_elevation(170.0);
+    up->set_range(4000.0);
+    simData::LobGroupUpdatePoint* up2 = u->add_datapoints();
+    up2->set_time(4.0); // this time will be reset to 3.0 on insert
+    up2->set_azimuth(35.0);
+    up2->set_elevation(180.0);
+    up2->set_range(4000.0);
+    simData::LobGroupUpdatePoint* up3 = u->add_datapoints();
+    up3->set_time(3.0);
+    up3->set_azimuth(25.0);
+    up3->set_elevation(175.0);
+    up3->set_range(4000.0);
     t.commit();
   }
 
-- 
2.47.1.windows.2

