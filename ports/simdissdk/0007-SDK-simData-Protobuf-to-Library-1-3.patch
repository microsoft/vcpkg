From 045a8e5193216eefdd51c31d2e7e4f9fd1acb26e Mon Sep 17 00:00:00 2001
From: Daniel Emminizer <daniel.m.emminizer.civ@us.navy.mil>
Date: Thu, 13 Mar 2025 13:26:23 +0000
Subject: [PATCH 07/29] SDK: simData Protobuf to Library (1/3)

**Release Notes:**
 * SDK NEW FEATURE: simDataProto is a new library that contains the simData protobuf library. simData now depends on simDataProto.
 * SDK NEW FEATURE: AddProtoLibrary.cmake (add_proto_library) replaces CreateProtobufLibrary.cmake (vsi_protobuf_generate), and can now be used to create static or shared libraries (with warning-free headers) given one or more protobuf files.

**JIRA Issue:** SIM-15139

**Description:** Protobuf updates to split out the .proto output to its own library, in preparation for supporting newer protobuf library versions. DataTypes.cpp does not compile simData.pb.cc any longer, and instead it is compiled by simDataProto library. Placing protobuf into its own library allows for transitivity of build configuration options in CMake, allowing for clean-up in simQt.

**Testing Performed:** Builds on Windows and Linux. Nightly testing with Find Package Test to ensure the install works properly.
---
 CMakeModules/AddProtoLibrary.cmake   | 180 +++++++++++++++++++++++++++
 SDK/simData/CMakeLists.txt           |  26 ++--
 SDK/simData/DataTypes.cpp            |  18 ---
 SDK/simData/simDataConfig.cmake.in   |   1 +
 SDK/simData/simDataProtoConfig.cmake |   3 +
 SDK/simQt/CMakeLists.txt             |   8 +-
 6 files changed, 200 insertions(+), 36 deletions(-)
 create mode 100644 CMakeModules/AddProtoLibrary.cmake
 create mode 100644 SDK/simData/simDataProtoConfig.cmake

diff --git a/CMakeModules/AddProtoLibrary.cmake b/CMakeModules/AddProtoLibrary.cmake
new file mode 100644
index 00000000..a826de92
--- /dev/null
+++ b/CMakeModules/AddProtoLibrary.cmake
@@ -0,0 +1,180 @@
+#[=======================================================================[.rst:
+AddProtoLibrary
+---------------
+
+Utility functions to easily create static or shared libraries out of protobuf files.
+This is intended to replace the older CreateProtobufLibrary code.s
+
+.. command:: add_proto_library
+
+  Adds a new library (static or shared) that contains the generated protobuf C++ code,
+  along with warning-free headers:
+
+  .. code-block:: cmake
+
+    add_proto_library(
+      <target-name>
+      [STATIC|SHARED]
+      [LITE]
+      [PROTO_DIR <dir>]
+      [EXPORT_MACRO <macro>]
+      [PROTOC_OUT_DIR <dir>]
+      [HDR_CODE_BLOCK <cpp-code>]
+      [PROTOC_OPTIONS <option>...]
+      [IMPORT_DIRS <dir>...]
+      [<proto-file>...])
+
+
+ `SHARED` libraries can specify an `EXPORT_MACRO` 
+
+  ``<target-name>``
+    Name of the target to create as a library.
+
+  ``STATIC``
+    Create the library as a static library. This is the default.
+
+  ``SHARED``
+    Create the library as a shared library. Use in conjunction with ``EXPORT_MACRO``
+    for best success on Windows.
+
+  ``LITE``
+    Link against the libprotobuf-lite library. Only valid for ``STATIC``
+
+  ``NO_HEADER``
+    Do not generate the warning-free headers. By default, all headers are generated.
+
+  ``PROTO_DIR <dir>``
+    Directory relative to ``CMAKE_CURRENT_SOURCE_DIR`` where protobuf files ``proto-file``
+    are located. Often this is omitted, but sometimes is set to ``proto`` or ``GenCode``.
+    This is automatically added to ``IMPORT_DIRS``.
+
+  ``EXPORT_MACRO <macro>``
+    Is a macro which should expand to ``__declspec(dllexport)`` or
+    ``__declspec(dllimport)`` depending on what is being compiled.
+    Only relevant for ``SHARED`` library invocations.
+
+  ``PROTOC_OUT_DIR <dir>``
+    Directory for writing protoc output. Defaults to ``CMAKE_CURRENT_BINARY_DIR``.
+
+  ``HDR_CODE_BLOCK <cpp-code>``
+    Add the provided C++ code block to the top of warning-free headers generated.
+
+  ``PROTOC_OPTIONS <option>...``
+    Additional arguments that are forwarded to protoc.
+
+  ``IMPORT_DIRS <dir>...``
+    Additional import directories for protoc to use when processing the import keyword.
+    The ``PROTO_DIR`` if specified is automatically added to this.
+
+  ``<proto-file>...``
+    ``.proto`` files
+
+#]=======================================================================]
+
+function(add_proto_library TARGETNAME)
+    # Must have the protobuf_generate() command from find_package(Protobuf)
+    if(NOT COMMAND protobuf_generate)
+        find_package(Protobuf REQUIRED)
+    endif()
+
+    set(_options SHARED STATIC LITE NO_HEADER)
+    set(_singleargs PROTO_DIR EXPORT_MACRO PROTO_OUT_DIR HDR_CODE_BLOCK)
+    set(_multiargs PROTOC_OPTIONS IMPORT_DIRS)
+    cmake_parse_arguments(arg "${_options}" "${_singleargs}" "${_multiargs}" ${ARGN})
+
+    # Must have the protobuf_generate() command from find_package(Protobuf)
+    if(NOT COMMAND protobuf_generate)
+        find_package(Protobuf REQUIRED)
+    endif()
+
+    # Arguments that will be passed to protobuf_generate(), built throughout the function
+    set(_GEN_ARGS
+        TARGET ${TARGETNAME}
+        LANGUAGE cpp
+    )
+
+    # Determine if static or shared; default to static
+    set(_LIB_TYPE STATIC)
+    if(arg_SHARED)
+        set(_LIB_TYPE SHARED)
+        # Shared libraries might need export macros
+        if(arg_EXPORT_MACRO)
+            list(APPEND _GEN_ARGS EXPORT_MACRO ${arg_EXPORT_MACRO})
+        endif()
+    endif()
+
+    # Argument for PROTO_OUT_DIR to protobuf_generate
+    set(_PROTO_OUT_DIR "${CMAKE_CURRENT_BINARY_DIR}")
+    if(arg_PROTO_OUT_DIR)
+        set(_PROTO_OUT_DIR ${arg_PROTO_OUT_DIR})
+        list(APPEND _GEN_ARGS PROTO_OUT_DIR ${arg_PROTO_OUT_DIR})
+    endif()
+
+    # Add the optional arguments
+    if(arg_PROTOC_OPTIONS)
+        list(APPEND _GEN_ARGS PROTOC_OPTIONS ${arg_PROTOC_OPTIONS})
+    endif()
+
+    # Make sure protobuf directory has a trailing slash
+    set(_PROTO_DIR)
+    if(arg_PROTO_DIR)
+        set(_PROTO_DIR "${arg_PROTO_DIR}/")
+        list(APPEND arg_IMPORT_DIRS "${_PROTO_DIR}")
+    endif()
+
+    # IMPORT_DIRS passes directly down and is used for import processing
+    if(arg_IMPORT_DIRS)
+        list(APPEND _GEN_ARGS IMPORT_DIRS ${arg_IMPORT_DIRS})
+    endif()
+
+    # Put together the warning-free headers and list of files to include in the library
+    set(_PROTO_EXT)
+    set(_HDR_FILES)
+    set(PROTOBUF_WRAPPER_PREFACE ${arg_HDR_CODE_BLOCK})
+    foreach(_FILE_PREFIX IN LISTS arg_UNPARSED_ARGUMENTS)
+        # Generate a warning-free wrapper header in the output directory
+        if(NOT arg_NO_HEADER)
+            set(_HDR_OUT ${_PROTO_OUT_DIR}/${_FILE_PREFIX}.h)
+            configure_file(${CMAKE_SOURCE_DIR}/CMakeImport/ProtobufFileWrapper.h.in ${_HDR_OUT} @ONLY)
+            set_property(SOURCE ${_HDR_OUT} PROPERTY OBJECT_DEPENDS ${_PROTO_OUT_DIR}/${PROTO_FILE_PREFIX}.pb.h)
+            list(APPEND _HDR_FILES ${_HDR_OUT})
+        endif()
+
+        list(APPEND _PROTO_EXT ${_PROTO_DIR}${_FILE_PREFIX}.proto)
+    endforeach()
+
+    # Create the library itself
+    add_library(${TARGETNAME} ${_LIB_TYPE} ${_PROTO_EXT} ${_HDR_FILES})
+    if(arg_LITE AND NOT arg_SHARED)
+        target_link_libraries(${TARGETNAME} PUBLIC protobuf::libprotobuf-lite)
+    else()
+        target_link_libraries(${TARGETNAME} PUBLIC protobuf::libprotobuf)
+    endif()
+    target_include_directories(${TARGETNAME} PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+        $<INSTALL_INTERFACE:${INSTALLSETTINGS_INCLUDE_DIR}>
+    )
+    # Cannot build .pb.cc files in unity mode
+    set_target_properties(${TARGETNAME} PROPERTIES UNITY_BUILD OFF)
+    # Run the generation on the .proto files, generating .pb.h/.pb.cc files
+    protobuf_generate(${_GEN_ARGS})
+
+    # Do the compile definitions for declspec
+    if(arg_SHARED AND arg_EXPORT_MACRO)
+        if(WIN32)
+            target_compile_definitions(${TARGETNAME}
+                PRIVATE "${arg_EXPORT_MACRO}=__declspec(dllexport)"
+                INTERFACE "${arg_EXPORT_MACRO}=__declspec(dllimport)"
+            )
+        else()
+            target_compile_definitions(${TARGETNAME}
+                PUBLIC "${arg_EXPORT_MACRO}="
+            )
+        endif()
+    endif()
+
+    # Enable /bigobj on Windows in debug mode to avoid segments issue
+    if(MSVC AND arg_SHARED)
+        target_compile_options(${TARGETNAME} PRIVATE "$<$<CONFIG:Debug,RelWithDebInfo>:-bigobj>")
+    endif()
+endfunction()
diff --git a/SDK/simData/CMakeLists.txt b/SDK/simData/CMakeLists.txt
index 9762da0b..4856450a 100644
--- a/SDK/simData/CMakeLists.txt
+++ b/SDK/simData/CMakeLists.txt
@@ -7,7 +7,6 @@ if(NOT TARGET protobuf::libprotobuf)
 endif()
 
 # Variables used in the simDataConfig.cmake generation
-include(CreateProtobufLibrary)
 set(SIMDATA_HAVE_ENTT OFF)
 
 # ----- simData --------------------------------------------------------
@@ -125,14 +124,6 @@ source_group(Headers\\GeneratedCode
         ${DATA_GENERATED_SOURCES}
 )
 
-
-# Generate the .pb.cc and .pb.h file from protobuf
-vsi_protobuf_generate(simData_protobuf_generation "${CMAKE_CURRENT_SOURCE_DIR}/GeneratedCode" "simData.proto"
-    SIMDATA_PROTO_H SIMDATA_PROTO_CC =dllexport_decl=SDKDATA_EXPORT:.)
-set_target_properties(simData_protobuf_generation PROPERTIES
-    FOLDER "SIMDIS SDK"
-    PROJECT_LABEL "simData Protobuf Generation")
-
 # ----------------------------------------------------------------------
 
 set(DATA_PROJECT_FILES
@@ -146,6 +137,18 @@ if(SIMDATA_SHARED)
     set(STATIC_OR_SHARED SHARED)
 endif()
 
+include(AddProtoLibrary)
+add_proto_library(simDataProto STATIC
+    simData
+    NO_HEADER
+    PROTO_DIR GeneratedCode
+    EXPORT_MACRO SIMDATAPROTO_EXPORT
+)
+set_target_properties(simDataProto PROPERTIES
+    FOLDER "SIMDIS SDK"
+    PROJECT_LABEL "simData Protobuf Library"
+)
+
 add_library(simData ${STATIC_OR_SHARED} ${DATA_PROJECT_FILES})
 set_target_properties(simData PROPERTIES
     FOLDER "SIMDIS SDK"
@@ -159,9 +162,7 @@ target_include_directories(simData PUBLIC
     $<INSTALL_INTERFACE:include>
 )
 
-
-target_link_libraries(simData PUBLIC protobuf::libprotobuf simCore simNotify)
-add_dependencies(simData simData_protobuf_generation)
+target_link_libraries(simData PUBLIC protobuf::libprotobuf simCore simNotify simDataProto)
 if(SIMDATA_SHARED)
     target_compile_definitions(simData PRIVATE simData_LIB_EXPORT_SHARED)
 else()
@@ -179,6 +180,7 @@ if(WIN32)
 endif()
 
 if(INSTALL_SIMDIS_SDK_LIBRARIES)
+    vsi_install_export(simDataProto ${SIMDIS_SDK_VERSION_STRING} AnyNewerVersion)
     # Configure the simDataConfig.cmake file; its dependencies are dynamic
     configure_file(simDataConfig.cmake.in simDataConfig.cmake @ONLY)
     vsi_install_export(simData ${SIMDIS_SDK_VERSION_STRING} AnyNewerVersion)
diff --git a/SDK/simData/DataTypes.cpp b/SDK/simData/DataTypes.cpp
index c636423a..36adecd4 100644
--- a/SDK/simData/DataTypes.cpp
+++ b/SDK/simData/DataTypes.cpp
@@ -20,26 +20,8 @@
  * disclose, or release this software.
  *
  */
-// File to wrap the simData.pb.cc file generated by
-// protoc with the appropriate resources
-
 #include "simData/DataTypes.h"
 
-#ifdef _MSC_VER // [
-#pragma warning(push)
-// Disable C4244: "conversion from __int64 to int, possible loss of data"
-// Disable C4267: "conversion from size_t to int, possible loss of data"
-// Disable C4018: "signed/unsigned mismatch"
-#pragma warning(disable : 4244 4267 4018)
-#endif // _MSC_VER ]
-
-#include "simData.pb.cc"
-
-#ifdef _MSC_VER // [
-#pragma warning(pop)
-#endif // _MSC_VER ]
-
-
 namespace simData
 {
   // Max value is used as no value.
diff --git a/SDK/simData/simDataConfig.cmake.in b/SDK/simData/simDataConfig.cmake.in
index ccd15a6b..e0409571 100644
--- a/SDK/simData/simDataConfig.cmake.in
+++ b/SDK/simData/simDataConfig.cmake.in
@@ -2,6 +2,7 @@ include(CMakeFindDependencyMacro)
 
 find_dependency(simNotify)
 find_dependency(simCore)
+find_dependency(simDataProto)
 find_dependency(Protobuf)
 
 if(@SIMDATA_HAVE_ENTT@)
diff --git a/SDK/simData/simDataProtoConfig.cmake b/SDK/simData/simDataProtoConfig.cmake
new file mode 100644
index 00000000..e4d6b2aa
--- /dev/null
+++ b/SDK/simData/simDataProtoConfig.cmake
@@ -0,0 +1,3 @@
+include(CMakeFindDependencyMacro)
+find_dependency(Protobuf)
+include("${CMAKE_CURRENT_LIST_DIR}/simDataProtoTargets.cmake")
diff --git a/SDK/simQt/CMakeLists.txt b/SDK/simQt/CMakeLists.txt
index f102e1f6..61a74415 100644
--- a/SDK/simQt/CMakeLists.txt
+++ b/SDK/simQt/CMakeLists.txt
@@ -347,10 +347,6 @@ if(OSGSIM_FOUND)
     target_link_libraries(simQt PRIVATE ${OSGSIM_LIBRARIES})
     target_include_directories(simQt PRIVATE "$<BUILD_INTERFACE:${OSG_INCLUDE_DIR}>")
 endif()
-if(TARGET simData AND TARGET protobuf::libprotobuf)
-    get_target_property(_PROTO_INC protobuf::libprotobuf INTERFACE_INCLUDE_DIRECTORIES)
-    target_include_directories(simQt PUBLIC "$<BUILD_INTERFACE:${_PROTO_INC}>")
-endif()
 if(TARGET simVis)
     target_include_directories(simQt PUBLIC
         $<BUILD_INTERFACE:${OSG_LIBRARY_INCLUDE_PATH}>
@@ -365,8 +361,8 @@ if(TARGET OSGQT)
 endif()
 
 # Parts of simQt depend on simData's protobuf generated code
-if(TARGET simData)
-    add_dependencies(simQt simData_protobuf_generation)
+if(TARGET simDataProto)
+    target_link_libraries(simQt PRIVATE simDataProto)
 endif()
 
 if(UNIX)
-- 
2.47.1.windows.2

