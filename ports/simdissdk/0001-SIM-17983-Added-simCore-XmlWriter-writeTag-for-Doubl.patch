From 7f0b5727d2b15ebfac4598b54020551fda5f1c44 Mon Sep 17 00:00:00 2001
From: George Ruhlmann <george.m.ruhlmann.ctr@us.navy.mil>
Date: Fri, 28 Feb 2025 14:23:27 +0000
Subject: [PATCH 01/29] SIM-17983 Added simCore::XmlWriter::writeTag for
 Doubles with Precision Control (1/2 SDK)

**JIRA Issue:** SIM-17983

**Description:** Added new method to maintain backwards compatibility.  Not part of the release.

**Testing Performed:** Manual testing with SIMDIS
---
 SDK/simCore/String/XmlWriter.cpp  | 15 +++++++++++++++
 SDK/simCore/String/XmlWriter.h    |  9 +++++++++
 Testing/SimCore/XmlWriterTest.cpp | 31 +++++++++++++++++++++++++++++++
 3 files changed, 55 insertions(+)

diff --git a/SDK/simCore/String/XmlWriter.cpp b/SDK/simCore/String/XmlWriter.cpp
index 0db01d33..19ddd588 100644
--- a/SDK/simCore/String/XmlWriter.cpp
+++ b/SDK/simCore/String/XmlWriter.cpp
@@ -21,8 +21,11 @@
 *
 */
 #include <algorithm>
+#include <iomanip>
 #include <iostream>
+#include <limits>
 #include "simNotify/Notify.h"
+#include "simCore/Calc/Math.h"
 #include "simCore/String/XmlWriter.h"
 
 namespace
@@ -211,6 +214,18 @@ void XmlWriter::writeTag(const std::string& tag, double data, const std::string&
   os_ << ">" << data << "</" << namespace_ << tag << ">\n";
 }
 
+void XmlWriter::writeTag(const std::string& tag, double data, unsigned int precision, const std::string& comment, const std::string& attr)
+{
+  precision = simCore::sdkMin(precision, static_cast<unsigned int>(std::numeric_limits<double>::digits10));
+
+  // use a local std::stringstream so as not to pollute os_
+  std::stringstream ss;
+  ss << std::fixed << std::setprecision(precision) << data;
+
+  writeTagStart_(comment, tag, attr);
+  os_ << ">" << ss.str() << "</" << namespace_ << tag << ">\n";
+}
+
 void XmlWriter::writeRawTag(const std::string& tag, const std::string& data, const std::string& comment, const std::string& attr)
 {
   if (data.empty())
diff --git a/SDK/simCore/String/XmlWriter.h b/SDK/simCore/String/XmlWriter.h
index 14ee0ef8..3a6b0ea6 100644
--- a/SDK/simCore/String/XmlWriter.h
+++ b/SDK/simCore/String/XmlWriter.h
@@ -191,6 +191,15 @@ public:
    */
   void writeTag(const std::string& tag, double data, const std::string& comment = "", const std::string& attr = "");
 
+  /** Double variant of writing a tag with precision control.
+   * @param[in ] tag String defining the XML element
+   * @param[in ] data Double written as string between start and end tags.
+   * @param[in ] precision The number of digits after the decimal point
+   * @param[in ] comment String written prior to the start tag, if useComments is true
+   * @param[in ] attr Attribute string written as-is into the start tag
+   */
+  void writeTag(const std::string& tag, double data, unsigned int precision, const std::string& comment = "", const std::string& attr = "");
+
   /**
    * Raw string variant of writing a tag.  Use this only if your text is
    * preformatted for XML output, e.g. containing CDATA.
diff --git a/Testing/SimCore/XmlWriterTest.cpp b/Testing/SimCore/XmlWriterTest.cpp
index d801dfff..c161186d 100644
--- a/Testing/SimCore/XmlWriterTest.cpp
+++ b/Testing/SimCore/XmlWriterTest.cpp
@@ -404,6 +404,36 @@ int testUtf8ErrorsInXmlWriter()
   return rv;
 }
 
+int testOneDouble(const std::string& tag, double input, unsigned int precision, const std::string& expected)
+{
+  std::stringstream ss;
+  simCore::XmlWriter writer(ss);
+  writer.writeTag(tag, input, precision);
+  std::string actual = ss.str();
+  return SDK_ASSERT(actual == expected);
+}
+
+int testWriteTagDouble()
+{
+  int rv = 0;
+
+  double value = 1.23456789;
+
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 0, "<Text>1</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 1, "<Text>1.2</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 2, "<Text>1.23</Text>\n"));
+  /** Rounds, not truncates */
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 3, "<Text>1.235</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 4, "<Text>1.2346</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 5, "<Text>1.23457</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 6, "<Text>1.234568</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 7, "<Text>1.2345679</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 8, "<Text>1.23456789</Text>\n"));
+  rv += SDK_ASSERT(0 == testOneDouble("Text", value, 9, "<Text>1.234567890</Text>\n"));
+
+  return rv;
+}
+
 }
 
 int XmlWriterTest(int argc, char* argv[])
@@ -414,6 +444,7 @@ int XmlWriterTest(int argc, char* argv[])
   rv += SDK_ASSERT(0 == testWriteTag());
   rv += SDK_ASSERT(0 == testXmlWriter());
   rv += SDK_ASSERT(0 == testUtf8ErrorsInXmlWriter());
+  rv += SDK_ASSERT(0 == testWriteTagDouble());
   std::cout << "simCore simCore::XmlWriterTest " << ((rv == 0) ? "passed" : "failed") << std::endl;
 
   return rv;
-- 
2.47.1.windows.2

