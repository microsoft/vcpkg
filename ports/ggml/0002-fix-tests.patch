--- a/tests/test-mul-mat2.c
+++ b/tests/test-mul-mat2.c
@@ -28,6 +28,14 @@
 #define __builtin_popcountll __popcnt64
 #endif
 
+#if defined (_MSC_VER) && !defined(_M_X64)
+#include<intrin.h>
+static __forceinline unsigned __int64 __popcnt64(unsigned __int64 x)
+{
+  return __popcnt((unsigned int)x) + (((unsigned __int64)__popcnt((unsigned int)(x >> 32))) << 32);
+}
+#endif
+
 const int M = 1280;
 const int N = 1536;
 const int K = 1280;
--- a/tests/test-pad-reflect-1d.cpp
+++ b/tests/test-pad-reflect-1d.cpp
@@ -24,10 +24,8 @@ static void ggml_log_callback_default(ggml_log_level level, const char * text, v
 }
 
 struct ggml_context* make_ctx(void) {
-    struct ggml_init_params params = {
-        .mem_size = 2 * 1024 * 1024,
-    };
-    return ggml_init(params);
+        struct ggml_init_params params = { 2 * 1024 * 1024, NULL, true };
+        return ggml_init(params);
 }
 
 void check_tensor(struct ggml_tensor * t, float * expected_t_d, int ne0, int ne1, int ne2) {
@@ -85,11 +83,7 @@ void test_pad_reflect_1d(bool use_gpu) {
 
     // Test cases for different padding configurations
     {
-        params = (struct ggml_init_params){
-            .mem_size   = 16*1024*1024,
-            .mem_buffer = NULL,
-            .no_alloc   = true,
-        };
+        struct ggml_init_params params = { 16 * 1024 * 1024, NULL, true };
 
         ggml_log_set(ggml_log_callback_default, nullptr);
 
@@ -144,11 +138,7 @@ void test_pad_reflect_1d(bool use_gpu) {
     }
 
     {
-        params = (struct ggml_init_params){
-            .mem_size   = 16*1024*1024,
-            .mem_buffer = NULL,
-            .no_alloc   = true,
-        };
+        struct ggml_init_params params = { 16 * 1024 * 1024, NULL, true };
 
         ggml_log_set(ggml_log_callback_default, nullptr);
 
--- a/tests/test-vec0.c
+++ b/tests/test-vec0.c
@@ -3,6 +3,16 @@
 #include <stdlib.h>
 #include <time.h>
 
+#if defined(ANDROID)
+static inline void * aligned_alloc(size_t alignment, size_t size)
+{
+    void* ptr = NULL;
+    if (posix_memalign(&ptr, alignment, size) != 0)
+        return NULL;
+    return ptr;
+}
+#endif
+
 const int N = 1 << 14;
 const int M = 1 << 14;
 
