vcpkg_from_github(
    OUT_SOURCE_PATH SOURCE_PATH
    REPO open-license-manager/licensecc
    REF v2.0.0
    SHA512 4f1e80b536f2bb9685ac71fd185b841d0dfc0ef6747dac956d7514f7a3f207dfd366b87a7a6a505b8becf68660254eafbc26e8552ad34cd75c0530fae469bbaa
)

vcpkg_from_github(
    OUT_SOURCE_PATH LCC_GENERATOR_PATH
    REPO open-license-manager/lcc-license-generator
    REF HEAD
    SHA512 fc7b49075ca4f72fac0bf3ea3303c51afc03c976c5058ecb97cbe8bbf3319ab642489be8817048850ef88d89062efb6e01c7133a02f7f187f7fbdfbd860eb55a
)

file(REMOVE_RECURSE "${SOURCE_PATH}/extern/license-generator")
file(RENAME "${LCC_GENERATOR_PATH}" "${SOURCE_PATH}/extern/license-generator")

# Apply patches after setting up license-generator
vcpkg_apply_patches(
    SOURCE_PATH ${SOURCE_PATH}
    PATCHES
        patches/fix-boost-filesystem-normalize.patch
)

# Manually fix the CMakeLists.txt to remove project_initialize dependency
vcpkg_replace_string(
    ${SOURCE_PATH}/CMakeLists.txt
    "add_custom_target(project_initialize
  COMMAND license_generator::lccgen project initialize -t \"\${PROJECT_SOURCE_DIR}/src/templates\" -n \"\${LCC_PROJECT_NAME}\" -p \"\${LCC_PROJECTS_BASE_DIR}\"
  COMMENT \"generating \${LCC_PROJECT_PUBLIC_KEY} and \${LCC_PROJECT_PRIVATE_KEY} if they don't already exist\"
  USES_TERMINAL
)"
    "# Dummy target to replace project_initialize for vcpkg builds
add_custom_target(project_initialize)"
)

# Create dummy public key for compilation
set(LCC_INCLUDE_DIR "${SOURCE_PATH}/projects/DEFAULT/include/licensecc/DEFAULT")
file(MAKE_DIRECTORY "${LCC_INCLUDE_DIR}")
file(WRITE "${LCC_INCLUDE_DIR}/public_key.h" 
"#ifndef PUBLIC_KEY_H_
#define PUBLIC_KEY_H_
#define PRODUCT_NAME \"DEFAULT\"
#define PUBLIC_KEY {0x30,0x82,0x01,0x22}
#define PUBLIC_KEY_LEN 4
#endif
")

vcpkg_cmake_configure(
    SOURCE_PATH ${SOURCE_PATH}
    OPTIONS
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_TESTING=OFF
        -DLCC_LOCATION=OFF
        -DCMAKE_DISABLE_FIND_PACKAGE_Git=ON
)

vcpkg_cmake_install()

# Set policy to skip CMake files check (these files are generated by the build system)
set(VCPKG_POLICY_SKIP_MISPLACED_CMAKE_FILES_CHECK enabled)

# Remove debug binaries and includes (they are the same as release)
file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/bin")
file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/include")

# Remove unwanted tools from bin directory
file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/bin")

# Fix library installations
file(GLOB LIBS "${CURRENT_PACKAGES_DIR}/debug/licensecc/DEFAULT/*.lib")
if(LIBS)
    file(MAKE_DIRECTORY "${CURRENT_PACKAGES_DIR}/debug/lib")
    file(COPY ${LIBS} DESTINATION "${CURRENT_PACKAGES_DIR}/debug/lib")
endif()

file(GLOB LIBS "${CURRENT_PACKAGES_DIR}/licensecc/DEFAULT/*.lib")
if(LIBS)
    file(MAKE_DIRECTORY "${CURRENT_PACKAGES_DIR}/lib")
    file(COPY ${LIBS} DESTINATION "${CURRENT_PACKAGES_DIR}/lib")
endif()

# Remove project-specific folders
file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/licensecc")
file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/licensecc")

# Handle includes
file(GLOB INCLUDES "${CURRENT_PACKAGES_DIR}/include/*")
if(NOT INCLUDES)
    file(MAKE_DIRECTORY "${CURRENT_PACKAGES_DIR}/include")
    file(GLOB_RECURSE HEADERS "${CURRENT_PACKAGES_DIR}/debug/include/*.h")
    foreach(HEADER ${HEADERS})
        file(RELATIVE_PATH REL_PATH "${CURRENT_PACKAGES_DIR}/debug/include" ${HEADER})
        get_filename_component(DIR "${CURRENT_PACKAGES_DIR}/include/${REL_PATH}" DIRECTORY)
        file(MAKE_DIRECTORY ${DIR})
        file(COPY ${HEADER} DESTINATION ${DIR})
    endforeach()
endif()

file(INSTALL ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/licensecc RENAME copyright)
