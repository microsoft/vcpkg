diff --git a/cmake/helpers/GdalGenerateConfig.cmake b/cmake/helpers/GdalGenerateConfig.cmake
index a2e9dfcdd1..debddd7062 100644
--- a/cmake/helpers/GdalGenerateConfig.cmake
+++ b/cmake/helpers/GdalGenerateConfig.cmake
@@ -21,24 +21,45 @@ function(gdal_join_and_quote _var)
     set(${_var} "${string}" PARENT_SCOPE)
 endfunction()
 
-# Return a flat list of libs including target linking requirements.
-function(gdal_flatten_link_libraries _result)
+# Return a flat list of libs including target linking requirements,
+# prepended to _result input. Targets appear only once, as late as possible.
+# Targets which are already in _result are not resolved/added again.
+function(gdal_flatten_link_libraries _result _is_debug_build)
+    set(_libs "${${_result}}")
+    gdal_process_link_keywords(working_list "${_is_debug_build}" ${ARGN})
+    while(working_list)
+        list(POP_BACK working_list _lib)
+        if(NOT TARGET "${_lib}")
+            list(PREPEND _libs "${_lib}")
+        elseif(_lib IN_LIST _libs)
+            # already resolved, do not repeat
+            continue()
+        else()
+            # new target
+            get_target_property(_link_libraries ${_lib} INTERFACE_LINK_LIBRARIES)
+            get_target_property(_type ${_lib} TYPE)
+            if(_link_libraries AND NOT TYPE STREQUAL "SHARED_LIBRARY")
+                gdal_flatten_link_libraries(_libs "${_is_debug_build}" ${_link_libraries})
+            endif()
+            list(PREPEND _libs "${_lib}")
+        endif()
+    endwhile()
+    set(${_result} "${_libs}" PARENT_SCOPE)
+endfunction()
+
+# Process link keywords and generator expressions for the purpose of exporting linker flags.
+function(gdal_process_link_keywords _result _is_debug_build)
     set(_libs "")
-    string(COMPARE EQUAL "${CMAKE_BUILD_TYPE}" "Debug" is_debug_build)
-    if(CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE IN_LIST DEBUG_CONFIGURATIONS)
-        set(is_debug_build TRUE)
-    endif()
     while(ARGN)
-        list(GET ARGN 0 _lib)
-        list(REMOVE_AT ARGN 0)
+        list(POP_FRONT ARGN _lib)
         if(_lib STREQUAL "debug")
-            if(NOT is_debug_build)
-                list(REMOVE_AT ARGN 0)
+            if(NOT _is_debug_build)
+                list(POP_FRONT ARGN)
             endif()
             continue()
         elseif(_lib STREQUAL "optimized")
-            if(is_debug_build)
-                list(REMOVE_AT ARGN 0)
+            if(_is_debug_build)
+                list(POP_FRONT ARGN)
             endif()
             continue()
         elseif(_lib STREQUAL "general")
@@ -47,13 +68,6 @@ function(gdal_flatten_link_libraries _result)
         gdal_resolve_link_genex(_lib "${_lib}")
         if(_lib)
             list(APPEND _libs "${_lib}")
-            if(TARGET "${_lib}")
-                get_target_property(_link_libraries ${_lib} INTERFACE_LINK_LIBRARIES)
-                get_target_property(_type ${_lib} TYPE)
-                if(_link_libraries AND NOT TYPE STREQUAL "SHARED_LIBRARY")
-                    list(INSERT ARGN 0 ${_link_libraries})
-                endif()
-            endif()
         endif()
     endwhile()
     set(${_result} "${_libs}" PARENT_SCOPE)
@@ -107,6 +121,20 @@ function(gdal_evaluate_link_genex _result _keyword _params)
         else()
             set(value 0)
         endif()
+    elseif(_keyword STREQUAL "AND")
+        string(REPLACE "," ";" params_list "${_params}")
+        if("0" IN_LIST params_list)
+            set(value 0)
+        else()
+            set(value 1)
+        endif()
+    elseif(_keyword STREQUAL "OR")
+        string(REPLACE "," ";" params_list "${_params}")
+        if("1" IN_LIST params_list)
+            set(value 1)
+        else()
+            set(value 0)
+        endif()
     elseif(_keyword STREQUAL "BOOL")
         if("${_params}")
             set(value 1)
@@ -117,9 +145,9 @@ function(gdal_evaluate_link_genex _result _keyword _params)
         set(value "")
     else()
         if(NOT _params STREQUAL "")
-            string(APPEND _keyword ":\${_params}")
+            string(APPEND _keyword ":${_params}")
         endif()
-        message(WARNING "Dropping unsupported generator expression: '\$<${_params}>'")
+        message(WARNING "Dropping unsupported generator expression: '\$<${_keyword}>'")
         set(value "")
     endif()
     set(${_result} "${value}" PARENT_SCOPE)
@@ -198,11 +226,16 @@ endfunction()
 # Get linker flags for cmake link libraries, with targets and generator
 # expressions resolved for the current build type.
 function(gdal_get_lflags _result)
-    gdal_flatten_link_libraries(_libs_in ${ARGN})
+    string(COMPARE EQUAL "${CMAKE_BUILD_TYPE}" "Debug" is_debug_build)
+    if(CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE IN_LIST DEBUG_CONFIGURATIONS)
+        set(is_debug_build TRUE)
+    endif()
+
+    set(_libs_in "")
+    gdal_flatten_link_libraries(_libs_in "${is_debug_build}" ${ARGN})
+
     set(_libs_out "")
-    while(_libs_in)
-        list(GET _libs_in 0 _lib)
-        list(REMOVE_AT _libs_in 0)
+    foreach(_lib IN LISTS _libs_in)
         if(TARGET "${_lib}")
             get_property(_type TARGET ${_lib} PROPERTY TYPE)
             if(_type STREQUAL "INTERFACE_LIBRARY")
@@ -241,7 +274,7 @@ function(gdal_get_lflags _result)
             list(REMOVE_ITEM _libs_out "${_lib}")
             list(APPEND _libs_out "${_lib}")
         endif()
-    endwhile()
+    endforeach()
     set(${_result} "${_libs_out}" PARENT_SCOPE)
 endfunction()
 
