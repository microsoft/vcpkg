diff --git a/TAO/TAO_IDL/be/be_codegen.cpp b/TAO/TAO_IDL/be/be_codegen.cpp
index a7ee5daa65e..a7a46d5fc10 100644
--- a/TAO/TAO_IDL/be/be_codegen.cpp
+++ b/TAO/TAO_IDL/be/be_codegen.cpp
@@ -3726,45 +3726,22 @@ TAO_CodeGen::make_rand_extension (char * const t)
   // static_cast<> to an integral type.
   unsigned int seed = static_cast<unsigned int> (msec);

-  // We only care about UTF-8 / ASCII characters in generated
-  // filenames.  A UTF-16 or UTF-32 character could potentially cause
-  // a very large space to be searched in the below do/while() loop,
-  // greatly slowing down this mkstemp() implementation.  It is more
-  // practical to limit the search space to UTF-8 / ASCII characters
-  // (i.e. 127 characters).
-  //
-  // Note that we can't make this constant static since the compiler
-  // may not inline the return value of ACE_Numeric_Limits::max(),
-  // meaning multiple threads could potentially initialize this value
-  // in parallel.
-  float const MAX_VAL =
-    static_cast<float> (ACE_Numeric_Limits<char>::max ());
-
-  // Use high-order bits rather than low-order ones (e.g. rand() %
-  // MAX_VAL).  See Numerical Recipes in C: The Art of Scientific
-  // Computing (William  H. Press, Brian P. Flannery, Saul
-  // A. Teukolsky, William T. Vetterling; New York: Cambridge
-  // University Press, 1992 (2nd ed., p. 277).
-  //
-  // e.g.: MAX_VAL * rand() / (RAND_MAX + 1.0)
+  // Strict ASCII alphabet (uppercase letters and digits), independent of locale.
+  static constexpr char ALPHABET[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
+  static constexpr int ALEN = static_cast<int>(sizeof(ALPHABET) - 1); // no '\0'

-  // Factor out the constant coefficient.
-  float const coefficient =
-    static_cast<float> (MAX_VAL / static_cast<float> (RAND_MAX) + 1.0f);
-
-  for (unsigned int n = 0; n < NUM_CHARS; ++n)
+  unsigned int const limit = (static_cast<unsigned int>(RAND_MAX) / ALEN) * ALEN;
+  for (size_t n = 0; n < NUM_CHARS; ++n)
     {
-      ACE_TCHAR r;
-
-      // This do/while() loop allows this alphanumeric character
-      // selection to work for EBCDIC, as well.
+      unsigned int r32 = 0;
+      // Rejection sampling to avoid modulo bias.
       do
         {
-          r = static_cast<ACE_TCHAR> (coefficient * ACE_OS::rand_r (&seed));
+          r32 = static_cast<unsigned int>(ACE_OS::rand_r(&seed));
         }
-      while (!ACE_OS::ace_isalnum (r));
+      while (r32 >= limit);

-      t[n] = static_cast<char> (ACE_OS::ace_toupper (r));
+      t[n] = ALPHABET[r32 % ALEN];
     }
 }

@@ -3784,8 +3761,7 @@ TAO_CodeGen::gen_conn_ts_includes (
        i.advance ())
     {
       i.next (tmp);
-      this->gen_standard_include (this->ciao_conn_header_,
-                                  *tmp);
+      this->gen_standard_include (this->ciao_conn_header_, *tmp);
     }
 }

