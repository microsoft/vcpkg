# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: MIT
#

jobs:
- job: ${{ parameters.jobName }}
  pool:
    name: $(unstable-pool)
  workspace:
    clean: resources
  timeoutInMinutes: 5760 # 4 days
  variables:
  - name: WORKING_ROOT
    value: D:\
  - name: VCPKG_DOWNLOADS
    value: D:\downloads
  - name: Codeql.Enabled
    value: false
  steps:
  - task: PowerShell@2
    name: mintsasstep
    displayName: 'Generate Asset Cache SAS tokens'
    inputs:
      targetType: inline
      script: |
        if ($Null -eq (Get-PackageProvider -Name NuGet -ErrorAction Ignore)) {
            Install-PackageProvider -Name NuGet -Force -Scope CurrentUser;
        }
        if ($Null -eq (Get-InstalledModule -Name PowerShellGet -MinimumVersion 2.2.1 -ErrorAction Ignore)) {
            Install-Module PowerShellGet -MinimumVersion 2.2.1 -Scope CurrentUser -Force -AllowClobber
        }
        Install-Module -Name Az -Repository PSGallery -Scope CurrentUser -Force -AllowClobber
        Connect-AzAccount -AccountId 'a81b4cd3-9d8d-4cb9-9a74-f2038f24f224' -Identity
        $ctx = New-AzStorageContext -StorageAccountName 'vcpkgassetcachewus3' -UseConnectedAccount
        $StartTime = Get-Date
        $EndTime = $StartTime.AddDays(2)
        $sas = New-AzStorageContainerSASToken -Name 'cache' -Permission rwd -StartTime $StartTime -ExpiryTime $EndTime -Context $ctx
        Write-Host "##vso[task.setvariable variable=X_VCPKG_ASSET_SOURCES;isSecret=true;isOutput=true;isreadonly=true]x-azurl,https://vcpkgassetcachewus3.blob.core.windows.net/cache,$sas,readwrite"
  - task: DownloadBuildArtifacts@0
    displayName: 'Download DropBuildNumber if not specified'
    inputs:
      buildType: specific
      project: '0bdbc590-a062-4c3f-b0f6-9383f67865ee'
      pipeline: 16549
      buildVersionToDownload: latestFromBranch
      branchName: 'refs/heads/$(MSVCBranchName)'
      artifactName: BuildNumber
      downloadPath: 'D:\msvc-drops'
    condition: eq(variables['DropBuildNumber'], '')
  - task: PowerShell@2
    displayName: 'Set DropBuildNumber if not specified'
    inputs:
      targetType: inline
      script: |
        $DropBuildNumber = Get-Content -Path D:\msvc-drops\BuildNumber\Build.BuildNumber.txt
        Write-Host "##vso[task.setvariable variable=DropBuildNumber]$DropBuildNumber"
        Write-Host "Build Number set to: $DropBuildNumber"
      pwsh: true
    condition: eq(variables['DropBuildNumber'], '')
  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
    displayName: 'Download msvc x86 ret'
    inputs:
      dropServiceURI: 'https://devdiv.artifacts.visualstudio.com/DefaultCollection'
      buildNumber: 'msvc/builds/$(DropBuildNumber)/x86ret'
      destinationPath: 'D:\msvc-drops\$(DropBuildNumber)\binaries.x86ret'
  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
    displayName: 'Download msvc amd64 ret'
    inputs:
      dropServiceURI: 'https://devdiv.artifacts.visualstudio.com/DefaultCollection'
      buildNumber: 'msvc/builds/$(DropBuildNumber)/amd64ret'
      destinationPath: 'D:\msvc-drops\$(DropBuildNumber)\binaries.amd64ret'
  - task: PowerShell@2
    displayName: 'Rearrange MSVC Drop Layout'
    inputs:
      targetType: filePath
      filePath: 'scripts/azure-pipelines/windows-unstable/rearrange-msvc-drop-layout.ps1'
      arguments: '-DropRoot "D:\msvc-drops\$(DropBuildNumber)" -BuildType ret'
      pwsh: true
  - script: .\bootstrap-vcpkg.bat
    displayName: 'Bootstrap vcpkg'
  - task: PowerShell@2
    displayName: '*** Test Modified Ports'
    env:
      X_VCPKG_ASSET_SOURCES: $(mintsasstep.X_VCPKG_ASSET_SOURCES)
    inputs:
      failOnStderr: true
      filePath: 'scripts/azure-pipelines/test-modified-ports.ps1'
      arguments: "-Triplet ${{ replace(parameters.jobName, '_', '-') }} -BuildReason $(Build.Reason) -WorkingRoot ${{ variables.WORKING_ROOT }} -ArtifactStagingDirectory $(Build.ArtifactStagingDirectory) -PassingIsPassing"
      pwsh: true
  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: failure logs for ${{ replace(parameters.jobName, '_', '-') }}"
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\failure-logs'
      ArtifactName: "failure logs for ${{ replace(parameters.jobName, '_', '-') }}"
    condition: ne(variables['FAILURE_LOGS_EMPTY'], 'True')
